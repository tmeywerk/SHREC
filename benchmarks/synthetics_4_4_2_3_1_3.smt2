(set-logic QF_LRA)
(declare-fun r3 () Real)
(declare-fun b1 () Bool)
(declare-fun b2 () Bool)
(declare-fun b0 () Bool)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun r2 () Real)
(assert (let ((.def_0 (* (/ 1967771037690053 4503599627370496) r3))) (let ((.def_1 (* (- (/ 188993666900189 4503599627370496)) r2))) (let ((.def_2 (* (- (/ 695244737619471 2251799813685248)) r1))) (let ((.def_3 (* (- (/ 743213616878823 4503599627370496)) r0))) (let ((.def_4 (+ .def_3 .def_2 .def_1 .def_0))) (let ((.def_5 (<= .def_4 (- (/ 6291776106831179 9007199254740992))))) (let ((.def_6 (not b2))) (let ((.def_7 (or .def_6 b0 .def_5))) (let ((.def_8 (* (/ 4475302066115881 4503599627370496) r3))) (let ((.def_9 (* (- (/ 696196264233879 2251799813685248)) r2))) (let ((.def_10 (* (- (/ 2080160182478213 4503599627370496)) r1))) (let ((.def_11 (* (- (/ 786651646340817 2251799813685248)) r0))) (let ((.def_12 (+ .def_11 .def_10 .def_9 .def_8))) (let ((.def_13 (<= .def_12 (- (/ 4352261084131709 9007199254740992))))) (let ((.def_14 (not b0))) (let ((.def_15 (not b1))) (let ((.def_16 (or .def_15 .def_14 .def_13))) (let ((.def_17 (and .def_16 .def_7))) .def_17)))))))))))))))))))
(check-sat)
