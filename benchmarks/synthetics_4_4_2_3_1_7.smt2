(set-logic QF_LRA)
(declare-fun r3 () Real)
(declare-fun b2 () Bool)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun b3 () Bool)
(declare-fun r2 () Real)
(assert (let ((.def_0 (* (- (/ 1426261480621473 4503599627370496)) r3))) (let ((.def_1 (* (/ 966415637106197 562949953421312) r2))) (let ((.def_2 (* (/ 1769960765811017 4503599627370496) r1))) (let ((.def_3 (* (- (/ 608052371039901 1125899906842624)) r0))) (let ((.def_4 (+ .def_3 .def_2 .def_1 .def_0))) (let ((.def_5 (<= .def_4 (- (/ 904585168714783 2251799813685248))))) (let ((.def_6 (or b3 b2 .def_5))) (let ((.def_7 (* (- (/ 2960341455542869 9007199254740992)) r3))) (let ((.def_8 (* (/ 811435307170027 562949953421312) r2))) (let ((.def_9 (* (- (/ 791555609509423 2251799813685248)) r1))) (let ((.def_10 (* (- (/ 1217958670796721 2251799813685248)) r0))) (let ((.def_11 (+ .def_10 .def_9 .def_8 .def_7))) (let ((.def_12 (<= .def_11 (- (/ 1152672691305237 2251799813685248))))) (let ((.def_13 (not b2))) (let ((.def_14 (or .def_13 b3 .def_12))) (let ((.def_15 (and .def_14 .def_6))) .def_15)))))))))))))))))
(check-sat)
