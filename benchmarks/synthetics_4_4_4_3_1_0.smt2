(set-logic QF_LRA)
(declare-fun b2 () Bool)
(declare-fun b3 () Bool)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun r2 () Real)
(declare-fun r3 () Real)
(declare-fun b0 () Bool)
(declare-fun b1 () Bool)
(assert (let ((.def_0 (* (- (/ 7143072704112741 9007199254740992)) r3))) (let ((.def_1 (* (/ 4457825731584771 4503599627370496) r2))) (let ((.def_2 (* (/ 1328873469323767 4503599627370496) r1))) (let ((.def_3 (* (- (/ 2718181989458867 9007199254740992)) r0))) (let ((.def_4 (+ .def_3 .def_2 .def_1 .def_0))) (let ((.def_5 (<= .def_4 (- (/ 804392286359425 4503599627370496))))) (let ((.def_6 (or b3 b1 .def_5))) (let ((.def_7 (* (- (/ 6283515334994213 9007199254740992)) r3))) (let ((.def_8 (* (- (/ 3042402105092997 2251799813685248)) r2))) (let ((.def_9 (* (- (/ 2529101683004267 9007199254740992)) r1))) (let ((.def_10 (* (/ 4635521582672005 9007199254740992) r0))) (let ((.def_11 (+ .def_10 .def_9 .def_8 .def_7))) (let ((.def_12 (<= .def_11 (- (/ 5817434994745755 9007199254740992))))) (let ((.def_13 (not b0))) (let ((.def_14 (or .def_13 b2 .def_12))) (let ((.def_15 (* (- (/ 6988280446423873 9007199254740992)) r3))) (let ((.def_16 (* (- (/ 4962161628841995 2251799813685248)) r2))) (let ((.def_17 (* (- (/ 1350793311956655 1125899906842624)) r1))) (let ((.def_18 (* (/ 1256048461161491 562949953421312) r0))) (let ((.def_19 (+ .def_18 .def_17 .def_16 .def_15))) (let ((.def_20 (<= .def_19 (- (/ 6732524001167597 4503599627370496))))) (let ((.def_21 (not b2))) (let ((.def_22 (or .def_21 b0 .def_20))) (let ((.def_23 (* (/ 34124001559167 4503599627370496) r3))) (let ((.def_24 (* (/ 393279859588971 281474976710656) r2))) (let ((.def_25 (* (- (/ 5041847598839269 9007199254740992)) r1))) (let ((.def_26 (* (/ 2774165672229875 9007199254740992) r0))) (let ((.def_27 (+ .def_26 .def_25 .def_24 .def_23))) (let ((.def_28 (<= .def_27 (/ 1117158394877383 2251799813685248)))) (let ((.def_29 (or .def_21 b3 .def_28))) (let ((.def_30 (and .def_29 .def_22 .def_14 .def_6))) .def_30))))))))))))))))))))))))))))))))
(check-sat)
