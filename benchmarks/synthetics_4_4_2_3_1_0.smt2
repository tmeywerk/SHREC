(set-logic QF_LRA)
(declare-fun r3 () Real)
(declare-fun b1 () Bool)
(declare-fun b2 () Bool)
(declare-fun b0 () Bool)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun r2 () Real)
(assert (let ((.def_0 (* (/ 1948599300521133 4503599627370496) r3))) (let ((.def_1 (* (/ 1073599661374569 1125899906842624) r2))) (let ((.def_2 (* (/ 1367361096777643 4503599627370496) r1))) (let ((.def_3 (* (- (/ 567135856932697 4503599627370496)) r0))) (let ((.def_4 (+ .def_3 .def_2 .def_1 .def_0))) (let ((.def_5 (<= .def_4 (/ 1937336739547287 9007199254740992)))) (let ((.def_6 (or b0 b1 .def_5))) (let ((.def_7 (* (/ 1907433545201359 1125899906842624) r3))) (let ((.def_8 (* (/ 438930940300543 1125899906842624) r2))) (let ((.def_9 (* (/ 1620335486144707 1125899906842624) r1))) (let ((.def_10 (* (- (/ 2412639983437387 4503599627370496)) r0))) (let ((.def_11 (+ .def_10 .def_9 .def_8 .def_7))) (let ((.def_12 (<= .def_11 (/ 2313032272951157 4503599627370496)))) (let ((.def_13 (not b1))) (let ((.def_14 (or b2 .def_13 .def_12))) (let ((.def_15 (and .def_14 .def_6))) .def_15)))))))))))))))))
(check-sat)
