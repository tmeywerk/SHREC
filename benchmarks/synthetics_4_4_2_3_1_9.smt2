(set-logic QF_LRA)
(declare-fun r3 () Real)
(declare-fun b1 () Bool)
(declare-fun b2 () Bool)
(declare-fun b0 () Bool)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun r2 () Real)
(assert (let ((.def_0 (* (/ 1380055515184855 1125899906842624) r3))) (let ((.def_1 (* (/ 127465430754991 140737488355328) r2))) (let ((.def_2 (* (/ 116231126599687 1125899906842624) r1))) (let ((.def_3 (* (- (/ 1550367656087563 2251799813685248)) r0))) (let ((.def_4 (+ .def_3 .def_2 .def_1 .def_0))) (let ((.def_5 (<= .def_4 (- (/ 2453314190992535 9007199254740992))))) (let ((.def_6 (not b1))) (let ((.def_7 (or .def_6 b2 .def_5))) (let ((.def_8 (* (/ 6095761982408651 9007199254740992) r3))) (let ((.def_9 (* (/ 2221174980520813 4503599627370496) r2))) (let ((.def_10 (* (- (/ 3860268647308515 4503599627370496)) r1))) (let ((.def_11 (* (/ 375947621513893 2251799813685248) r0))) (let ((.def_12 (+ .def_11 .def_10 .def_9 .def_8))) (let ((.def_13 (<= .def_12 (- (/ 1392506938176827 2251799813685248))))) (let ((.def_14 (not b2))) (let ((.def_15 (or .def_14 b0 .def_13))) (let ((.def_16 (and .def_15 .def_7))) .def_16))))))))))))))))))
(check-sat)
