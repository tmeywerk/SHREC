(set-logic QF_LRA)
(declare-fun r3 () Real)
(declare-fun b1 () Bool)
(declare-fun b2 () Bool)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun b3 () Bool)
(declare-fun r2 () Real)
(assert (let ((.def_0 (* (- (/ 1573113883031139 4503599627370496)) r3))) (let ((.def_1 (* (/ 3016965517744063 2251799813685248) r2))) (let ((.def_2 (* (- (/ 3956381815284563 9007199254740992)) r1))) (let ((.def_3 (* (- (/ 1866971652567 140737488355328)) r0))) (let ((.def_4 (+ .def_3 .def_2 .def_1 .def_0))) (let ((.def_5 (<= .def_4 (- (/ 876746029115221 2251799813685248))))) (let ((.def_6 (not b3))) (let ((.def_7 (or b1 .def_6 .def_5))) (let ((.def_8 (* (/ 2840763608496989 4503599627370496) r3))) (let ((.def_9 (* (- (/ 920420104728431 1125899906842624)) r2))) (let ((.def_10 (* (/ 179473934874857 2251799813685248) r1))) (let ((.def_11 (* (/ 6297972171024725 9007199254740992) r0))) (let ((.def_12 (+ .def_11 .def_10 .def_9 .def_8))) (let ((.def_13 (<= .def_12 (- (/ 173971496110269 562949953421312))))) (let ((.def_14 (or b2 b3 .def_13))) (let ((.def_15 (and .def_14 .def_7))) .def_15)))))))))))))))))
(check-sat)
