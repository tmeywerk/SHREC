(set-logic QF_LRA)
(declare-fun r3 () Real)
(declare-fun b1 () Bool)
(declare-fun b2 () Bool)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun r2 () Real)
(assert (let ((.def_0 (* (/ 4375452595960373 4503599627370496) r3))) (let ((.def_1 (* (/ 201509181399053 140737488355328) r2))) (let ((.def_2 (* (/ 43723798109013 4503599627370496) r1))) (let ((.def_3 (* (- (/ 8825215777165603 9007199254740992)) r0))) (let ((.def_4 (+ .def_3 .def_2 .def_1 .def_0))) (let ((.def_5 (<= .def_4 (- (/ 1560156563858157 4503599627370496))))) (let ((.def_6 (not b2))) (let ((.def_7 (not b1))) (let ((.def_8 (or .def_7 .def_6 .def_5))) (let ((.def_9 (* (/ 955180031934791 2251799813685248) r3))) (let ((.def_10 (* (- (/ 776523098381565 2251799813685248)) r2))) (let ((.def_11 (* (- (/ 8101439723366691 4503599627370496)) r1))) (let ((.def_12 (* (- (/ 1812294117029863 9007199254740992)) r0))) (let ((.def_13 (+ .def_12 .def_11 .def_10 .def_9))) (let ((.def_14 (<= .def_13 (- (/ 2256855935090007 1125899906842624))))) (let ((.def_15 (or b1 b2 .def_14))) (let ((.def_16 (and .def_15 .def_8))) .def_16))))))))))))))))))
(check-sat)
