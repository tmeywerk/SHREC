(set-logic QF_LRA)
(declare-fun r3 () Real)
(declare-fun b1 () Bool)
(declare-fun b2 () Bool)
(declare-fun r0 () Real)
(declare-fun r1 () Real)
(declare-fun r2 () Real)
(assert (let ((.def_0 (* (/ 6598460623397699 9007199254740992) r3))) (let ((.def_1 (* (- (/ 2108030561311641 4503599627370496)) r2))) (let ((.def_2 (* (/ 2567228687260461 9007199254740992) r1))) (let ((.def_3 (* (- (/ 3205631132876871 4503599627370496)) r0))) (let ((.def_4 (+ .def_3 .def_2 .def_1 .def_0))) (let ((.def_5 (<= .def_4 (- (/ 3472340232824745 4503599627370496))))) (let ((.def_6 (or b2 b1 .def_5))) (let ((.def_7 (* (- (/ 7669432624751675 9007199254740992)) r3))) (let ((.def_8 (* (- (/ 6037694442952305 9007199254740992)) r2))) (let ((.def_9 (* (/ 4888152746382435 9007199254740992) r1))) (let ((.def_10 (* (/ 2089280035499165 4503599627370496) r0))) (let ((.def_11 (+ .def_10 .def_9 .def_8 .def_7))) (let ((.def_12 (<= .def_11 (- (/ 7066685946446943 9007199254740992))))) (let ((.def_13 (not b1))) (let ((.def_14 (not b2))) (let ((.def_15 (or .def_14 .def_13 .def_12))) (let ((.def_16 (and .def_15 .def_6))) .def_16))))))))))))))))))
(check-sat)
